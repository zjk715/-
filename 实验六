#include<cstdio>
#include<iostream>
#include<cstring>
#include<string>
#include<cstdlib>
#include<iomanip>
using namespace std;
typedef long long ll;
int n, k, a[10000], ans;
void insort(int a[], int left, int right) {
    int temp, j;
    for (int i = left + 1; i <= right; i++) {
        temp = a[i];
        for (j = i - 1; j >= left && temp < a[j]; j--)   a[j + 1] = a[j];
        a[j + 1] = temp;
    }
}
int partition(int left, int right, int mid) {
    int t, i = left - 1, j, temp;
    for (j = left; j < right; j++) {
        if (a[j] == mid)  swap(a[j], a[right]);
    }
    t = a[right];
    for (j = left; j < right; j++) {
        if (a[j] <= t) {
            i++; swap(a[i], a[j]);
        }
    }
    swap(a[i + 1], a[right]);
    return i + 1;
}
int select(int left, int right, int k) {
    if (right - left + 1 <= 5) {
        insort(a, left, right);
        return a[left + k - 1];
    }
    int f = (right - left + 1 + 5) / 5;
    int leftt, rightt, midd;
    for (int i = 0; i < f; i++) {
        leftt = left + 5 * i;
        rightt = min(right, left + 5 * i + 4);
        midd = (left + right) / 2;
        insort(a, leftt, rightt);
        swap(a[left + i], a[midd]);
    }
    int mid = select(left, left + f - 1, (f + 1) / 2);
    int z = partition(left, right, mid);
    int ln = z - left;
    if (k == ln + 1)    return a[z];
    else if (k <= ln)    return select(left, z - 1, k);
    return select(z + 1, right, k - ln - 1);
}
int main() {
	scanf("%d %d", &n, &k);
	for (int i = 0; i < n; i++)	scanf("%d", &a[i]);
    ans = select(0, n - 1, k);
	printf("%d", ans);
}
