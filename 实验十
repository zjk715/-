#include <iostream>
using namespace std;
 
int bestw=0;//当前最优载重量
int c=50;
int N=4;
int y[4];
int r;//剩余集装箱重量
 
void Backtrack(int i,int cw,int w[],int x[])
{
    if(i>=N)//到达叶子结点
    {
        if(cw>bestw)
        {
            bestw=cw;
            for(int i=0;i<N;i++)
                y[i]=x[i];
        }
        return;
    }
    r-=w[i];
    //搜索子树
    if(cw+w[i]<=c)
    {
        x[i]=1;
        cw+=w[i];
        Backtrack(i+1,cw,w,x);
        cw-=w[i];
        x[i]=0;
    }
    if(cw+r>bestw)  //上界函数，保证到达叶结点时候的cw都优于当前的最优解bestw
    {
        x[i]=0;
        Backtrack(i+1,cw,w,x);
    }
    r+=w[i];
}
 
 
int main()
{
    int w[]={10,20,30,30};
    int x[N];
    for(int i=0;i<N;i++)
        r+=w[i];
    Backtrack(0,0,w,x);
    for(int i=0;i<N;i++)
        cout<<y[i]<<" ";
    cout<<endl;
    cout<<bestw<<endl;
}
